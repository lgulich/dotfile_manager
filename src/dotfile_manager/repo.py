from datetime import datetime
from pathlib import Path
import platform
import shutil
from typing import Dict

from dotfile_manager.config import BIN_PATH, SOURCE_FILE_PATH
from dotfile_manager.project import Project, InvalidProjectError


def get_os_name() -> str:
    """ Get the name of the operating system. """
    platform_name = platform.system()
    # TODO(lgulich): Find way to also determine linux distro.
    if platform_name == 'Linux':
        return 'ubuntu'
    if platform_name == 'Darwin':
        return 'macos'
    raise ValueError


def collect_projects(path: Path) -> Dict[str, Project]:
    """ Collect all projects in the passed folder. """
    projects = {}
    for project_path in sorted(path.iterdir()):
        try:
            project = Project(project_path)
        except InvalidProjectError:
            continue
        if project.is_disabled():
            continue
        projects[project.name] = project
    print(f'Found {len(projects)} projects.')
    return projects


class Repo:
    """ Class used to represent a dotfile repository. """

    def __init__(self, path: Path):
        self.path: Path = path
        self.projects: Dict[str, Project] = collect_projects(path)

    def get_path(self) -> Path:
        return self.path

    def install_all(self, verbose: bool = False, os_name: str = get_os_name()):
        for name, project in self.projects.items():
            if project.is_disabled():
                print(f'Project {name} is disabled - Skipping.')
                continue
            project.install(verbose=verbose, os_name=os_name)
        print('Successfully installed all projects.')

    def install(self, project: str, verbose: bool = False, os_name: str = get_os_name()):
        self.projects[project].install(verbose=verbose, os_name=os_name)

    def setup_all(self):
        # Create folder into which all binaries will be symlinked.
        bin_path = self.path / BIN_PATH
        shutil.rmtree(bin_path, ignore_errors=True)
        bin_path.mkdir(parents=True)

        # Create file which contains everything that should be sourced.
        source_file_path = self.path / SOURCE_FILE_PATH
        source_file_path.unlink(missing_ok=True)
        source_file_path.parent.mkdir(parents=True, exist_ok=True)
        with open(source_file_path, 'a') as output_file:
            output_file.write(f'# Autogenerated on {datetime.now()}.\n')
            output_file.write('# shellcheck shell=sh\n\n')

            # Setup every project individually:
            for name, project in self.projects.items():
                if project.is_disabled():
                    print(f'Project {name} is disabled - Skipping.')
                    continue
                print(f'Setting up {project.get_name()}:')
                project.create_symbolic_links()
                project.create_bin(bin_path)
                project.add_sources(output_file)

        print(f'Successfully setup all projects. Sourcing script created at "{source_file_path}". '
              f'Binaries located at "{bin_path}".')
