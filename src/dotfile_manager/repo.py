from datetime import datetime
from pathlib import Path
import os
import platform
import shutil

from dotfile_manager.config import BIN_PATH, SOURCE_FILE_PATH
from dotfile_manager.project import DotfileProject

def get_os_name() -> str:
    platform_name = platform.system()
    # TODO(lgulich): Find way to also determine linux distro.
    if platform_name == 'Linux':
        return 'ubuntu'
    if platform_name == 'Darwin':
        return 'macos'
    raise

class DotfilesRepo:
    def __init__(self, path: Path) -> None:
        self.path : Path = path

    def get_path(self) -> Path:
        return self.path

    def install(self, os_name = get_os_name()) -> None:
        for project_path in self.path.iterdir():
            project = DotfileProject(project_path)
            if not project.is_valid_project():
                continue
            if project.is_disabled():
                print(f'Project {project.get_name()} is disabled - Skipping.')
                continue
            project.install(os_name)
        print('Successfully installed all projects.')

    def setup(self) -> None:
        self._create_symbolic_links()
        self._create_bin()
        self._create_sources()

    def _create_symbolic_links(self) -> None:
        for project_path in self.path.iterdir():
            project = DotfileProject(project_path)
            if not project.is_valid_project():
                continue
            if project.is_disabled():
                print(f'Project {project.get_name()} is disabled - Skipping.')
                continue
            project.create_symbolic_links()
        print('Successfully setup symlinks to all dotfiles.')


    def _create_bin(self) -> None:
        destination = Path(self.path / BIN_PATH)
        shutil.rmtree(destination, ignore_errors=True)
        destination.mkdir(parents=True)
        for project_path in self.path.iterdir():
            project = DotfileProject(project_path)
            if not project.is_valid_project():
                continue
            if project.is_disabled():
                print(f'Project {project.get_name()} is disabled - Skipping.')
                continue
            project.create_bin(destination)
        print('Successfully setup symlinks to all binaries.')


    def _create_sources(self) -> None:
        destination = self.path / SOURCE_FILE_PATH
        destination.unlink(missing_ok=True)
        destination.parent.mkdir(parents=True, exist_ok=True)

        with open(destination, 'a') as output_file:
            output_file.write(f'# Autogenerated on {datetime.now()}.\n')
            output_file.write(f'# shellcheck shell=sh\n\n')

            for project_path in self.path.iterdir():
                project = DotfileProject(project_path)
                if not project.is_valid_project():
                    continue
                if project.is_disabled():
                    print(f'Project {project.get_name()} is disabled - Skipping.')
                    continue
                project.create_sources(output_file)
        print(f'Successfully created sourcing script at {destination}.')
